source src_{{ geoportal.name }}_location : def_pgsql_{{ geoportal.name }}
{
    sql_attr_uint = num
    sql_attr_uint = rank
    sql_attr_string = label
    sql_attr_string = origin
    sql_attr_string = geom_st_box2d
    sql_attr_float = x
    sql_attr_float = y
    sql_attr_float = lat
    sql_attr_float = lon
    sql_attr_bigint = weight
    sql_field_string = search_string
    sql_field_string = geom_quadindex
    sql_db = {{ mapserver.PORTAL_DB_NAME }}
}

{% for location in search.locations %}

source src_{{ geoportal.name }}_{{ location }} : src_{{ geoportal.name }}_location
{
    sql_query = \
        SELECT id \
        , remove_accents(name) as search_string \
        , name as label \
        , 'places' as origin \
        , geom_quadindex \
        , geom_st_box2d \
        , {{ search.origins_to_ranks[location] }} as rank \
        , x \
        , y \
        , lat \
        , lon \
        , osm_id as num \
        , row_number() OVER (ORDER BY name) AS weight \
        FROM osm.{{ location }} \
        WHERE name IS NOT NULL
}

index {{ geoportal.name }}_{{ location }}
{
    type = plain
    docinfo = extern
    min_infix_len = 2
    source = src_{{ geoportal.name }}_{{ location }}
    path = /var/lib/sphinx/data/{{ search.customer }}/{{ geoportal.name }}_{{ location }}
}


{%- endfor %}


index {{ geoportal.name }}_locations
{
    type = distributed
    {%- for location in search.locations %}
    local = {{geoportal.name}}_{{location}}
    {%- endfor %}
    min_infix_len = 2
}
