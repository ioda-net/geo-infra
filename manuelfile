#!/usr/bin/env bash

###############################################################################
# geo-infra Scripts and templates to create and manage geoportals
# Copyright (c) 2015-2016, sigeom sa
# Copyright (c) 2015-2016, Ioda-Net Sàrl
#
# Contact : contact (at)  geoportal (dot) xyz
# Repository : https://github.com/ioda-net/geo-infra
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
###############################################################################

# Exit on error
set -e
# Prevent usage of undefined variable
set -u

# Declare help
declare -A HELP

# Load config
source config/config.dist.sh
source config/config.sh 2> /dev/null || :

# Load tasks
source tasks/db.sh
source tasks/deploy.sh
source tasks/front.sh
source tasks/front-build.sh
source tasks/lint.sh
source tasks/utils.sh
source tasks/test.sh


# Make sure INFRA_DIR does not end with a '/' and is absolute.
INFRA_DIR="${INFRA_DIR%/}"
INFRA_DIR=$(realpath "${INFRA_DIR}")



HELP['dev']="manuel dev PORTAL1 [PORTAL2 [PORTAL3] …]

Generate a development version of mapinfra for the targeted portals.
"
function dev {
    local portal
    local alias
    local infra_dir
    local linted_directories=()
    for alias in "$@"; do
        infra_dir=$(_get-infra-dir "${alias}")
        _load-dev-config "${alias}"
        if [[ ! ("${linted_directories[@]:-}" =~ "${infra_dir}") ]]; then
            echo "Linting JSON and CSV files"
            lint "${infra_dir}"
            linted_directories+=("${infra_dir}")
        fi
        echo "****** Processing: ${alias} *****"
        portal=$(_get-portal-name-from-alias "${alias}")
        generate --type "dev" \
                 --portal "${portal}" \
                 --infra-dir "${infra_dir}" \
                 --verbose \
                 --map \
                 --json \
                 --help-site \
                 --print \
                 --search \
                 --copy-img
        echo "***** Done: ${alias} *****"
    done
}


HELP['dev-full']="manuel dev-full PORTAL1 [PORTAL2 [PORTAL3] …]

Generate a development version of mapinfra and frontend for the targeted portals. It will also
triger a reindex for sphinx, test the map files of each portal and copy tomcat configuration."
function dev-full {
    local infra_dir
    local portal
    local alias

    for alias in "$@"; do
        echo "***** Cleaning ${alias} *****"
        infra_dir=$(_get-infra-dir "${alias}")
        portal=$(_get-portal-name-from-alias "${alias}")
        _load-dev-config "${alias}"
        generate --type "dev" \
                 --portal "${portal}" \
                 --infra-dir "${infra_dir}" \
                 --clean \
                 --verbose
        echo "***** Done: ${alias} *****"
    done

    dev "$@"

    for alias in "$@"; do
        echo "***** Building front: ${alias}"
        _load-dev-config "${alias}"
        front dev "${alias}"
        tomcat-copy-conf "dev" "${alias}"
        test-map-files "dev" "${alias}"
        echo "***** Done: ${alias} *****"
    done

    echo "Reindexing"
    reindex
    restart-service "tomcat"
}


HELP['prod']="manuel prod PORTAL1 [PORTAL2 [PORTAL3] …]

Generate a production version of mapinfra and the frontend for targeted portals. To generate even
with uncommited changes or without changing branch, add the --force option as first parameter.

This task can be launch with portals from different infrastructures if --force is given."
function prod {
    local force
    local portal
    local alias
    local infra_dir
    local linted_directories=()
    if [[ "${1:-}" == "--force" ]]; then
        force="$1"
        shift
    fi

    # Load config will fail if INFRA_DIR is not a customer infra directory. Prevent that if we
    # force.
    if [[ -z "${force:-}" ]]; then
        _load-prod-config
    fi

    for alias in "$@"; do
        infra_dir=$(_get-infra-dir "${alias}")
        portal=$(_get-portal-name-from-alias "${alias}")
        if [[ ! ("${linted_directories[@]:-}" =~ "${infra_dir}") ]]; then
            echo "Linting JSON and CSV files"
            #lint "${infra_dir}"
            linted_directories+=("${infra_dir}")
        fi
        if [[ -n "${force:-}" ]]; then
            # If we are in force deploy, we set PROD_GIT_REPOS_LOCATION to infra dir for debug purposes.
            PROD_GIT_REPOS_LOCATION="${infra_dir}"
        fi
        echo "***** PROCESSING: ${alias} *****"
        echo "Updating test configuration"
        front build-test-conf "${portal}"
        clean 'prod' "${portal}"
        generate --type "prod" \
                 --portal "${portal}" \
                 --infra-dir "${infra_dir}" \
                 --prod-git-repos-location "${PROD_GIT_REPOS_LOCATION}" \
                 --verbose \
                 --clean \
                 --map \
                 --json \
                 --help-site \
                 --print \
                 --search \
                 --copy-img
        echo "Building the front end"
        front prod ${force:-} "${alias}"
        echo "Launching unit tests"
        front test-prod "${alias}"
        echo "***** Done: ${alias} *****"
    done
}


HELP['deploy']="manuel deploy PORTAL1 [PORTAL2 [PORTAL3] …]

Generate a production version of mapinfra and the frontend for targeted portals and deploy it."
function deploy {
    _load-prod-config

    sync-data
    prod "$@"

    for portal in "$@"; do
        echo "***** DEPLOYING: ${portal} *****"
        deploy-portal "${portal}"
        echo "***** Done: ${portal} *****"
    done

    echo "Completing deployment on server: restarting services and reindexing."
    execute-on-prod "$(declare -f _restart-apache) && \
        $(declare -f restart-service) && \
        $(declare -f reindex) && \
        restart-service apache && \
        restart-service tomcat && \
        restart-service search && \
        reindex"
}


HELP['help']="manuel help TASK

Display the help for TASK."
function help {
    if [[ -z "${1:-}" ]]; then
        help help
    else
        [[ -n "${HELP[$1]}" ]] && echo "${HELP[$1]}" || echo "No task named $1." >&2
    fi
}


HELP['watch']="manuel watch PORTAL

Watch and rebuild a portal on change. This is equivalent to 'manuel front watch PORTAL'"
function watch {
    front watch "$@"
}


HELP['launch-tests']="manuel launch-tests

Launch the unit tests against the development code. This is equivalent to 'manuel front test'"
function launch-tests {
    front test
}


HELP['lint-code']="manuel lint-code

Launch gslint on the javascript code. This is equivalent to 'manuel front lint'"
function lint-code {
    front lint
}


HELP['generate-tests-conf']="manuel generate-tests-conf

Generate the configuration for units tests (dev and prod). This is equivalent to:
'manuel front build-test-conf'"
function generate-tests-conf {
    front build-test-conf
}


HELP['config']="manuel config [TYPE] PORTAL

Print the configuration for the given type and portal. It will also print the config files that
are parsed in the order they are parsed. To only get the config, redirect error output to /dev/null.
To discard the config, redirect the standard output to /dev/null.

If you have jq installed, you can get any section from the JSON like that:
manuel config geojb 2> /dev/null | jq '.mapserver'

**Default values**

- *type* dev"
function config {
    local portal
    local portal_type
    _set-portal-type "$@"

    generate --type "${portal_type}" \
        --portal "${portal}" \
        --infra-dir $(_get-infra-dir "${portal}") \
        --config \
        --debug
}

